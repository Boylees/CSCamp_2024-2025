以下是一份 Git 与 GitHub 的学习笔记：

**一、Git 基础知识**

1. **版本控制系统（VCS）**：
    - Git 是一个分布式版本控制系统，用于管理文件的修改历史。它允许你跟踪文件的更改，协作开发项目，并在需要时回滚到之前的版本。

2. **基本概念**：
    - **Repository（仓库）**：存储项目的所有文件和修改历史的地方。可以分为本地仓库和远程仓库。
    - **Commit（提交）**：对文件或项目状态的一次保存。每次提交都有一个唯一的标识符（commit hash），并包含作者、时间戳和修改说明。
    - **Branch（分支）**：允许你从主开发线（通常是 `master` 分支）分离出一条独立的开发线，方便并行开发和测试新功能，而不影响主分支。
    - **Merge（合并）**：将一个分支的修改整合到另一个分支中。

3. **基本命令**：
    - **初始化仓库**：
```bash
git init
```
这将在当前目录创建一个新的 Git 本地仓库。

    - **添加文件到暂存区**：
```bash
git add <file_name>
```
将指定文件添加到暂存区，或使用 `git add.` 来添加当前目录下的所有文件。

    - **提交更改**：
```bash
git commit -m "Commit message"
```
将暂存区的文件保存到仓库，`-m` 后面是对这次提交的简短描述。

    - **查看状态**：
```bash
git status
```
显示当前仓库的状态，包括哪些文件已修改、已暂存或未跟踪。

    - **查看提交历史**：
```bash
git log
```
查看提交历史，可添加 `--oneline` 选项以简洁形式显示。


**二、分支操作**

1. **创建分支**：
```bash
git branch <branch_name>
```
创建一个新的分支。

2. **切换分支**：
```bash
git checkout <branch_name>
```
切换到指定的分支。

3. **创建并切换分支**：
```bash
git checkout -b <branch_name>
```
创建新分支并立即切换到该分支。

4. **合并分支**：
```bash
git merge <branch_name>
```
将 `branch_name` 分支的修改合并到当前分支。


**三、远程仓库操作（使用 GitHub）**

1. **添加远程仓库**：
```bash
git remote add origin <remote_repository_url>
```
将一个远程仓库（例如 GitHub 上的仓库）添加到本地，通常命名为 `origin`。

2. **推送本地提交到远程**：
```bash
git push origin <branch_name>
```
将本地分支的提交推送到远程仓库的相应分支。

3. **拉取远程修改**：
```bash
git pull origin <branch_name>
```
从远程仓库的相应分支拉取最新修改到本地。

4. **克隆远程仓库**：
```bash
git clone <remote_repository_url>
```
将远程仓库克隆到本地，会自动添加远程仓库并检出到本地。


**四、解决冲突**

当不同分支的修改发生冲突时，在合并或拉取时 Git 会提示冲突。需要手动解决冲突，冲突文件会包含冲突标记，如下：
```
<<<<<<< HEAD
your changes
=======
their changes
>>>>>>> branch_name
```
编辑文件，删除冲突标记并选择保留哪些修改，然后提交修改：
```bash
git add <conflict_file>
git commit -m "Resolved conflict"
```


**五、其他操作**

1. **撤销操作**：
    - **撤销暂存区文件**：
```bash
git reset <file_name>
```
将文件从暂存区移除。
    - **撤销提交（软重置）**：
```bash
git reset --soft HEAD~1
```
撤销最近一次提交，将修改保留在暂存区。
    - **撤销提交（硬重置）**：
```bash
git reset --hard HEAD~1
```
撤销最近一次提交，丢弃修改。


2. **查看差异**：
```bash
git diff
```
查看工作区和暂存区之间的差异，或使用 `git diff --staged` 查看暂存区和最近一次提交的差异。


**六、GitHub 功能**

1. **Fork 仓库**：
在 GitHub 上，点击 `Fork` 按钮可以将他人的仓库复制一份到自己的账户下，方便贡献代码或学习。

2. **Pull Request（PR）**：
在你对 Fork 的仓库进行修改后，可以发起 Pull Request 给原仓库的所有者，请求将你的修改合并到原仓库。

3. **Issues**：
在 GitHub 上可以创建 `Issues` 来记录项目的问题、需求、任务或讨论，方便项目的管理和团队协作。


**七、协作流程**

1. **Fork 流程**：
    - Fork 原仓库。
    - 克隆 Fork 后的仓库到本地。
    - 在本地修改和开发。
    - 提交修改到本地仓库，再推送到自己的远程仓库。
    - 发起 Pull Request 给原仓库。


2. **直接协作流程**：
    - 被添加为原仓库的协作者。
    - 克隆原仓库到本地。
    - 进行修改、提交和推送。


**八、最佳实践**

1. **频繁提交**：
尽量将修改拆分成多个小的、逻辑清晰的提交，方便查看修改历史和回滚。

2. **分支策略**：
使用分支进行特性开发、修复 bug 等，避免在主分支直接开发，常见的分支策略有 GitFlow、GitHub Flow 等。

3. **合并前审查**：
在合并代码前，进行代码审查，确保代码质量和功能正确性。


**九、常见问题和解决方法**

1. **冲突问题**：
按照冲突解决的步骤仔细处理，与团队成员沟通以协调修改。

2. **推送失败**：
可能是因为远程仓库有新的修改，先拉取最新修改并解决冲突后再推送。

